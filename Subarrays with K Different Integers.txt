*******Problem Statement********
*******Subarrays with K Different Integers********

Given an integer array nums and an integer k, return the number of good subarrays of nums.

A good array is an array where the number of different integers in that array is exactly k.

For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.
A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]
Example 2:

Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].
 

Constraints:

1 <= nums.length <= 2 * 104
1 <= nums[i], k <= nums.length

*****Code******

class Solution {
    public int getCount(int[] nums, int val){
        int n = nums.length;
        HashMap<Integer, Integer> map = new HashMap<>();
        int l = 0, r = 0, cnt = 0; 

        while(r < n){
            map.put(nums[r], map.getOrDefault(nums[r], 0)+1);

            while(map.size() > val){
                map.put(nums[l], map.get(nums[l]) - 1);

                if(map.get(nums[l]) == 0){
                    map.remove(nums[l]);
                }
                l++;
            }

            cnt += (r - l + 1);
            r++;
        }

        return cnt;
    }
    public int subarraysWithKDistinct(int[] nums, int val) {
        // //TC:O(n^3) SC:O(n)
        int n = nums.length;
        int cnt = 0;

        for(int i = 0; i < n; i++){
            HashSet<Integer> set = new HashSet<>();
            for(int j = i ; j < n; j++){
                for(int k = i; k <= j; k++){
                    set.add(nums[k]);
                }
                if(set.size() == val){
                        cnt++;
                }
            }
        }
        return cnt;

        // //TC:O(n^2) SC:O(n)
        int n = nums.length;
        int cnt = 0;
        for(int i = 0; i < n; i++){
            HashSet<Integer> set = new HashSet<>();
            for(int j = i ; j < n; j++){
                set.add(nums[j]);
                if(set.size() == val){
                        cnt++;
                }
                if(set.size() > val) break;
            }
        }
        return cnt;

        return getCount(nums, val) - getCount(nums, val - 1);
    }
}