
class Solution {
    public boolean isAnagram(String s, String t) {

        //Approach 1: Using Hash Table TC: O(n) SC:O(n)

        int[] count = new int[26];
        int n = s.length();
        int m = t.length();

        for(int i=0; i<n; i++){
            count[s.charAt(i)-'a']++;  
        }
        for(int i=0; i<m; i++){
            count[t.charAt(i)-'a']--;  
        }

        for(int el: count){
            if(el != 0){
                return false;
            }
        }

        return true;

        // Approach 2: Using HashMap TC: O(n) SC:O(n)

        HashMap<Character, Integer> map = new HashMap<>();

        for(char ch: s.toCharArray()){
            map.put(ch, map.getOrDefault(ch, 0) + 1);
        }
        for(char ch: t.toCharArray()){
            map.put(ch, map.getOrDefault(ch, 0) - 1);
        }

        for(int el: map.values()){
            if(el != 0){
                return false;
            }
        }

        return true;

        //Approach 3: Using sorting TC: O(nlogn) SC:O(1)
        char[] str1 = s.toCharArray();
        char[] str2 = t.toCharArray();

        Arrays.sort(str1);
        Arrays.sort(str2);

        return Arrays.equals(str1, str2);
    }
}