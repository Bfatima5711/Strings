******Problem Statement******
*****Count Number of Nice Subarrays******

Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.

Return the number of nice sub-arrays.

 

Example 1:

Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].
Example 2:

Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There is no odd numbers in the array.
Example 3:

Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
Output: 16
 

Constraints:

1 <= nums.length <= 50000
1 <= nums[i] <= 10^5
1 <= k <= nums.length

*****Code******

class Solution {
    public boolean ifNice(int[] nums, int k, int i, int j){
        int cnt = 0;
        for(int idx = i; idx <= j; idx++){
            if(nums[idx] % 2 != 0){
                cnt++;
            }
        }
        if(cnt == k){
            return true;
        }
        return false;
    }
    public int getCount(int[] nums, int goal){
        if(goal < 0) return 0;
        int n = nums.length;
        int r = 0, l = 0, cnt = 0, sum = 0;
        while(r < n){
            //we are adding 1 if no is odd and 0 if number is even this is exact solution for
            // quetion Binary Subarrays With Sum
            sum += (nums[r] % 2);

            while(sum > goal){
                sum = sum - (nums[l] % 2);
                l++;
            }

            cnt += (r - l + 1);
            r++;
        }

       return cnt;
    }
    public int numberOfSubarrays(int[] nums, int k) {
        //Approach 1: TC:O(n^3)  SC:O(1)
        // int n = nums.length;
        // int cnt = 0;

        // for(int i = 0; i < n; i++){
        //     for(int j = i; j < n; j++){
        //         if(ifNice(nums, k, i, j)){
        //             cnt++;
        //         }
        //     }
        // }
        // return cnt;

        //Approach 2: TC:O(n^2)  SC:O(1)
        // int n = nums.length;
        // int cnt = 0, maxCnt = 0;

        // for(int i = 0; i < n; i++){
        //     cnt = 0;
        //     for(int j = i; j < n; j++){
        //         if(nums[j] % 2 != 0){
        //             cnt++;
        //         }
        //          if(cnt == k){
        //             maxCnt += 1;
        //         }
        //     }

        // }
        // return maxCnt;

        //Approach 2: TC:O(2*2n)  SC:O(1)

        return getCount(nums, k) - getCount(nums, k-1);

    }
}