*******Problem Statement*******
******* Binary Subarrays With Sum*******
Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
Example 2:

Input: nums = [0,0,0,0,0], goal = 0
Output: 15
 

Constraints:

1 <= nums.length <= 3 * 104
nums[i] is either 0 or 1.
0 <= goal <= nums.length

*******Code*******

class Solution {
    public int getCount(int[] nums, int goal){
        if(goal < 0) return 0;

        int n = nums.length;
        int r = 0, l = 0, cnt = 0, sum = 0;

        while(r < n){
            sum += nums[r];

            while(sum > goal){
                sum = sum - nums[l];
                l++;
            }

            cnt += (r - l + 1);
            r++;
        }

       return cnt;
    }
    public int numSubarraysWithSum(int[] nums, int goal) {
        //Approach 1: TC:O(n^2)  SC:O(1)
        // int n = nums.length;
        // int cnt = 0, maxCnt = 0;

        // for(int i = 0; i < n; i++){
        //     cnt = 0;
        //     for(int j = i; j < n; j++){
        //         if(nums[j] % 2 != 0){
        //             cnt++;
        //         }
        //          if(cnt == goal){
        //             maxCnt += 1;
        //         }
        //     }

        // }
        // return maxCnt;

        //Approach 2: TC:O(n^2)  SC:O(1)

        return getCount(nums, goal) - getCount(nums, goal-1);

    }
}